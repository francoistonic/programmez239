{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab709
\pard\pardeftab709\ri-618\partightenfactor0

\f0\fs24 \cf0 # -*- mode: ruby -*-\
# vi: set ft=ruby :\
\
# All Vagrant configuration is done below. The "2" in Vagrant.configure\
# configures the configuration version (we support older styles for\
# backwards compatibility). Please don't change it unless you know what\
# you're doing.\
Vagrant.configure("2") do |config|\
  def fail_with_message(msg)\
    fail Vagrant::Errors::VagrantError.new, msg\
  end\
  # The most common configuration options are documented and commented below.\
  # For a complete reference, please see the online documentation at\
  # https://docs.vagrantup.com.\
\
  # Every Vagrant development environment requires a box. You can search for\
  # boxes at https://vagrantcloud.com/search.\
    config.vm.box = "debian/contrib-stretch64"\
\
  # Disable automatic box update checking. If you disable this, then\
  # boxes will only be checked for updates when the user runs\
  # `vagrant box outdated`. This is not recommended.\
  # config.vm.box_check_update = false\
\
  # Create a forwarded port mapping which allows access to a specific port\
  # within the machine from a port on the host machine. In the example below,\
  # accessing "localhost:8080" will access port 80 on the guest machine.\
  # config.vm.network "forwarded_port", guest: 80, host: 8080\
\
  # Create a private network, which allows host-only access to the machine\
  # using a specific IP.\
  config.vm.network "private_network", ip: "192.168.50.10"\
  config.vm.hostname = "monbeausite.localdev"\
\
  if Vagrant.has_plugin?('vagrant-hostmanager')\
    config.hostmanager.enabled = true\
    config.hostmanager.manage_host = true\
    config.hostmanager.aliases = %w(monbeausite.localdev.com tools.monbeausite.localdev mail.monbeausite.localdev db.monbeausite.localdev)\
\
  else\
    fail_with_message "vagrant-hostmanager missing, please install the plugin with this command:\\nvagrant plugin install vagrant-hostmanager\\n\\n"\
  end\
\
  # Create a public network, which generally matched to bridged network.\
  # Bridged networks make the machine appear as another physical device on\
  # your network.\
  # config.vm.network "public_network"+\
\
  # Share an additional folder to the guest VM. The first argument is\
  # the path on the host to the actual folder. The second argument is\
  # the path on the guest to mount the folder. And the optional third\
  # argument is a set of non-required options.\
  # config.vm.synced_folder "../data", "/vagrant_data"\
  config.vm.synced_folder "./", "/project", type: 'nfs', map_uid: 0, map_gid: 0\
\
  # Provider-specific configuration so you can fine-tune various\
  # backing providers for Vagrant. These expose provider-specific options.\
  # Example for VirtualBox:\
  #\
  # config.vm.provider "virtualbox" do |vb|\
  #   # Display the VirtualBox GUI when booting the machine\
  #   vb.gui = true\
  #\
  #   # Customize the amount of memory on the VM:\
  #   vb.memory = "1024"\
  # end\
  config.vm.provider "virtualbox" do |v|\
    #v.customize ["modifyvm", :id, "--cableconnected1", "on"]\
    v.name = "monbeausite_dev_env"\
    v.memory = "8192"\
    v.cpus = 6\
    #vb.customize ["modifyhd", "disk id", "--resize", "size in megabytes"]\
  end\
  #\
  # View the documentation for the provider you are using for more\
  # information on available options.\
\
  # Enable provisioning with a shell script. Additional provisioners such as\
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the\
  # documentation for more information about their specific syntax and use.\
  # config.vm.provision "shell", inline: <<-SHELL\
  #   apt-get update\
  #   apt-get install -y apache2\
  # SHELL\
    config.vm.provision "ansible_local" do |ansible|\
    ansible.galaxy_role_file = '/project/ansible/requirements.yml'\
    ansible.playbook = "/project/ansible/site.yml"\
    ansible.verbose = "v"\
  end\
end\
\
\
\
---\
# tasks file for common\
- name: Install basic packages\
  apt: name=\{\{item\}\}\
  with_items:\
  - htop\
  - nano\
  - ntp\
  - ntpdate\
  - git\
  - unzip\
  - apt-transport-https\
  - python-pip\
  - letsencrypt\
  - logrotate # todo faire conf\
  - curl\
  - lftp\
  - rsyslog\
  - util-linux-locales\
  - locales\
  - debconf-i18n\
  - fail2ban\
- default-jre #for jenkins\
}